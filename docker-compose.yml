services:
  api01: &api
    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
    # publicamente acessível! Ex.: hub.docker.com
    image: rinha-backend-2024-q1:latest
    hostname: api01
    environment:
      - DB_HOSTNAME=db
    # Não é necessário expor qualquer porta além da porta do load balancer,
    # mas é comum as pessoas o fazerem para testarem suas APIs e conectarem
    # ao banco de dados na fase de desenvolvimento.
    ports:
      - "8081:8080"
    depends_on:
      - db
    deploy:
      resources:
        limits:
          cpus: "0.525"
          memory: "210MB"
    networks:
      - backend_network

  api02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api
    hostname: api02
    environment:
      - DB_HOSTNAME=db
    ports:
      - "8082:8080"
    networks:
      - backend_network
  nginx:
    image: nginx:latest
    container_name: 'nginx'
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9999:9999"
    depends_on:
      - api01
      - api02
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "10MB"
      restart_policy:
        condition: on-failure
    networks:
      - backend_network

  db:
    image: postgres:latest
    hostname: db
    container_name: 'postgress'
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_USER=admin
      - POSTGRES_DB=rinha-backend
    ports:
      - "5432:5432"
    volumes:
      - ./scripts/script.sql:/docker-entrypoint-initdb.d/script.sql
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "200MB"
      restart_policy:
        condition: on-failure
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge