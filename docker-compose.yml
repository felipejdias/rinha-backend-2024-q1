services:
# TODO após a imagem docker do projeto funcionando descomentar todo esse bloco de api para q o nginx funcioone
#  api01: &api
#    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
#    # publicamente acessível! Ex.: hub.docker.com
#    image: ana/minha-api-matadora:latest
#    hostname: api01
#    environment:
#      - DB_HOSTNAME=db
#
#    # Não é necessário expor qualquer porta além da porta do load balancer,
#    # mas é comum as pessoas o fazerem para testarem suas APIs e conectarem
#    # ao banco de dados na fase de desenvolvimento.
#    ports:
#      - "8081:8080"
#    depends_on:
#      - db
#    deploy:
#      resources:
#        limits:
#          cpus: "0.6"
#          memory: "200MB"
#
#  api02:
#    # Essa sintaxe reusa o que foi declarado em 'api01'.
#    <<: *api
#    hostname: api02
#    environment:
#      - DB_HOSTNAME=db
#    ports:
#      - "8082:8080"

# TODO como ainda nao gerou uma imagem em um repo publico o nginx ainda não está configurado
#  nginx:
#    image: nginx:latest
#    container_name: 'nginx'
#    volumes:
#      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
#    ports:
#      # Obrigatório expor/usar a porta 9999 no load balancer!
#      - "9999:9999"
#    deploy:
#      resources:
#        limits:
#          cpus: "0.17"
#          memory: "10MB"

  db:
    image: postgres:latest
    hostname: db
    container_name: 'postgress'
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_USER=admin
      - POSTGRES_DB=rinha-backend
    ports:
      - "5432:5432"
    #volumes:
      #- ./scripts/script.sql:/docker-entrypoint-initdb.d/script.sql
    deploy:
      resources:
        limits:
          cpus: "0.13"
          memory: "140MB"
    networks:
      - rede-backend

networks:
  rede-backend:
    driver: bridge
